# Tranformacao da origem para a base
def t01(self):
    T01 = np.matrix(
        [[0, -1, 0, -0.214], [1, 0, 0, -0.314], [0, 0, 1, 0.4246], [0, 0, 0, 1]]
    )
    return T01


# Transformacao da base para a junta 1
def _h01(self, theta1):
    d1 = 0.089159
    H01 = np.matrix(
        [
            [cos(theta1 + pi / 2), 0, sin(theta1 + pi / 2), 0],
            [sin(theta1 + pi / 2), 0, -cos(theta1 + pi / 2), 0],
            [0, 1, 0, d1],
            [0, 0, 0, 1],
        ]
    )
    return H01


# Transformacao da junta 1 para a junta 2
def _h12(self, theta2):
    a2 = -0.425
    H12 = np.matrix(
        [
            [
                cos(theta2 - pi / 2),
                -sin(theta2 - pi / 2),
                0,
                a2 * cos(theta2 - pi / 2),
            ],
            [
                sin(theta2 - pi / 2),
                cos(theta2 - pi / 2),
                0,
                a2 * sin(theta2 - pi / 2),
            ],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
        ]
    )
    return H12


# Transformacao da junta 2 para a junta 3
def _h23(self, theta3):
    a3 = -0.39225
    H23 = np.matrix(
        [
            [cos(theta3), -sin(theta3), 0, a3 * cos(theta3)],
            [sin(theta3), cos(theta3), 0, a3 * sin(theta3)],
            [0, 0, 1, 0],
            [0, 0, 0, 1],
        ]
    )
    return H23


# Transformacao da junta 3 para a junta 4
def _h34(self, theta4):
    d4 = 0.10915
    H34 = np.matrix(
        [
            [cos(theta4 - pi / 2), 0, sin(theta4 - pi / 2), 0],
            [sin(theta4 - pi / 2), 0, -cos(theta4 - pi / 2), 0],
            [0, 1, 0, d4],
            [0, 0, 0, 1],
        ]
    )
    return H34


# Transformacao da junta 4 para a junta 5
def _h45(self, theta5):
    d5 = 0.09465
    H45 = np.matrix(
        [
            [cos(theta5), 0, -sin(theta5), 0],
            [sin(theta5), 0, cos(theta5), 0],
            [0, -1, 0, d5],
            [0, 0, 0, 1],
        ]
    )
    return H45


# Transformacao da junta 5 para a junta 6
def _h56(self, theta6):
    d6 = 0.0823
    H56 = np.matrix(
        [
            [cos(theta6), -sin(theta6), 0, 0],
            [sin(theta6), cos(theta6), 0, 0],
            [0, 0, 1, d6],
            [0, 0, 0, 1],
        ]
    )
    return H56


# Funcao de Cinematica Direta do UR5
def forward_kinematic(self, theta1, theta2, theta3, theta4, theta5, theta6):
    """
    join   |   theta   |      d  |      a   |     alpha |
    _____________________________________________________
    1      |   theta1  |      d1 |      0   |     pi/2  |
    2      |   theta2  |      0  |      a2  |     0     |
    3      |   theta3  |      0  |      a3  |     0     |
    4      |   theta4  |      d4 |      0   |     pi/2  |
    5      |   theta5  |      d5 |      0   |     -pi/2 |
    6      |   theta6  |      d6 |      0   |     0     |
    """

    T01 = self.t01()

    H01 = self._h01(theta1)

    H12 = self._h12(theta2)

    H23 = self._h23(theta3)

    H34 = self._h34(theta4)

    H45 = self._h45(theta5)

    H56 = self._h56(theta6)

    matrix = T01 * H01 * H12 * H23 * H34 * H45 * H56

    matrix[abs(matrix) < 1e-15] = 0

    return matrix
